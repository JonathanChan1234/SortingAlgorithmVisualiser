{"version":3,"sources":["components/SideMenuList.tsx","utils/constants.ts","sorting/heapSort.ts","sorting/mergeSort.ts","sorting/quickSort.ts","sorting/configuration.ts","sorting/bubbleSort.ts","sorting/insertionSort.ts","sorting/selectionSort.ts","components/SortingVisualiser/SortingOption.tsx","utils/utils.ts","components/SortingBar.tsx","hook/throttle.ts","components/SortingVisualiser/SortingVisualiser.tsx","components/SortingCompetition/SortingCompetitionOption.tsx","components/SortingCompetition/SortingModel.tsx","components/SortingCompetition/SortingCompetitionTable.tsx","components/SortingCompetition/SortingCompetition.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListItemLink","to","primary","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","ListItemText","useStyles","makeStyles","list","width","listItem","textDecoration","withRouter","toggleDrawer","classes","className","role","onClick","onKeyDown","List","animationColor","heapSort","arr","immediateResult","animation","index","Math","floor","length","heapify","swap","updateImmediateResult","arraySize","largest","left_index","right_index","first","second","Error","temp","result","comparedElement","push","mergeSort","low","high","animations","middle","merge","i","j","k","helperArray","quickSort","p","partition","pivot","swapElement","sortingConfiguration","bubble","name","value","sort","sortedArray","swapped","algorithm","heap","insertion","key","quick","selection","minIndex","SortingOption","maxNumberOfElement","minNumberOfElement","defaultNumberOfNumber","numberOfElement","sortingMethod","sortInProgress","updateSortingMethod","updateSortingElement","resetArray","Box","flexDirection","display","style","margin","alignItems","justifyContent","Button","disabled","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","onChange","event","defaultValue","min","max","Select","target","Object","keys","map","method","MenuItem","variant","color","generateRandomArray","randomArray","random","SortingBar","height","theme","createStyles","bar","backgroundColor","border","Tooltip","title","placement","useThrottleEffect","throttleValue","initThrottleItem","delay","useState","throttleItem","setThrottleItem","savedArguments","useRef","throttle","useEffect","current","setTimeout","animationTimeout","SortingVisualiser","setSortingMethod","setNumberOfElement","sortArray","sortElements","setSortElements","setSortInProgress","forEach","timeout","clearTimeout","sortingAnimation","Promise","resolve","ceil","a","async","sortingResult","iteration","number","element","includes","renderSortingBar","SortingCompetitionOption","defaultNumberOfElement","useStyle","sortingModelContainer","breakpoints","down","up","sortingModel","SortingModel","styles","m","comparisonTable","minWidth","maxWidth","SortingCompetitionTable","TableContainer","Paper","Table","size","TableHead","TableRow","TableCell","TableBody","sortElementKey","scope","comparison","renderTableRow","SortingCompetition","reset","setReset","initSortElements","newSortElements","sortingAlgorithm","startAnimation","maxIteration","newSortArray","sortingResultByAlgorithm","iterationLength","sortAnimation","timeoutId","console","log","then","catch","err","alert","message","sortCompetitionStart","flexWrap","renderSortingModel","App","drawerOpen","setDrawerOpen","state","AppBar","position","Toolbar","IconButton","Typography","Drawer","open","onClose","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1d3e6d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\r\nimport { RouteComponentProps, LinkProps, withRouter, Link } from 'react-router-dom';\r\n\r\ninterface ListItemLinkProps {\r\n\tprimary: string;\r\n\tto: string;\r\n}\r\n\r\nconst ListItemLink: React.FC<ListItemLinkProps> = ({ to, primary }) => {\r\n\tconst renderLink = React.useMemo(\r\n\t\t() =>\r\n\t\t\tReact.forwardRef<any, Omit<LinkProps, 'to'>>((itemProps, ref) => (\r\n\t\t\t\t<Link to={to} ref={ref} {...itemProps} />\r\n\t\t\t)),\r\n\t\t[to]\r\n\t);\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<ListItem button component={renderLink}>\r\n\t\t\t\t<ListItemText primary={primary} />\r\n\t\t\t</ListItem>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n\tlist: {\r\n\t\twidth: 250,\r\n\t},\r\n\tlistItem: {\r\n\t\ttextDecoration: 'none',\r\n\t},\r\n});\r\n\r\ninterface SideMenuListProps {\r\n\ttoggleDrawer: (state: boolean) => void;\r\n}\r\n\r\nconst SideMenuList: React.FC<RouteComponentProps & SideMenuListProps> = ({ toggleDrawer }) => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={classes.list}\r\n\t\t\trole='presentation'\r\n\t\t\tonClick={() => toggleDrawer(false)}\r\n\t\t\tonKeyDown={() => toggleDrawer(false)}>\r\n\t\t\t<List>\r\n\t\t\t\t<ListItemLink to='/sorting-visualiser' primary='Visualiser' />\r\n\t\t\t\t<ListItemLink to='/sorting-competition' primary='Competition' />\r\n\t\t\t</List>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default withRouter(SideMenuList);\r\n","export const DEFAULT_NUMBER_OF_ELEMENT = 10;\r\nexport const MAX_NUMBER_OF_ELEMENT = 100;\r\nexport const MIN_NUMBER_OF_ELEMENT = 10;\r\n\r\nexport const animationColor = ['#eb4c34', '#454bff', '#2dcc7a'];\r\nexport const defaultColor = '#fbffb0';\r\n\r\nexport const BUBBLE_SORT = 'bubble';\r\nexport const INSERTION_SORT = 'insertion';\r\nexport const QUICK_SORT = 'quick';\r\nexport const MERGE_SORT = 'merge';\r\nexport const SELECTION_SORT = 'selection';\r\nexport const HEAP_SORT = 'heap';\r\n","import { HEAP_SORT } from '../utils/constants';\r\n\r\nconst heapSortHelper = (arr: number[]) => {\r\n\tconst sortedArray: number[] = [...arr];\r\n\tconst immediateResult: number[][] = [];\r\n\tconst animation: number[][] = [];\r\n\theapSort(sortedArray, immediateResult, animation);\r\n\treturn {\r\n\t\tsortedArray: sortedArray,\r\n\t\timmediateResult: immediateResult,\r\n\t\tanimations: animation,\r\n\t\talgorithm: HEAP_SORT,\r\n\t};\r\n};\r\n\r\nconst heapSort = (arr: number[], immediateResult: number[][], animation: number[][]) => {\r\n\t// build the max heap of the array\r\n\tfor (let index = Math.floor(arr.length / 2) - 1; index >= 0; --index) {\r\n\t\theapify(arr, arr.length, index, immediateResult, animation);\r\n\t}\r\n\r\n\t// swap the first and the last element\r\n\tfor (let index = arr.length - 1; index > 0; --index) {\r\n\t\tswap(arr, 0, index);\r\n\t\tupdateImmediateResult(arr, [0, index], immediateResult, animation);\r\n\t\theapify(arr, index, 0, immediateResult, animation);\r\n\t}\r\n};\r\n\r\nconst heapify = (\r\n\tarr: number[],\r\n\tarraySize: number,\r\n\tindex: number,\r\n\timmediateResult: number[][],\r\n\tanimation: number[][]\r\n) => {\r\n\tlet largest = index;\r\n\tconst left_index = index * 2 + 1;\r\n\tconst right_index = index * 2 + 2;\r\n\r\n\tif (left_index < arraySize && arr[left_index] > arr[largest]) {\r\n\t\tlargest = left_index;\r\n\t\tupdateImmediateResult(arr, [left_index, largest], immediateResult, animation);\r\n\t}\r\n\r\n\tif (right_index < arraySize && arr[right_index] > arr[largest]) {\r\n\t\tlargest = right_index;\r\n\t\tupdateImmediateResult(arr, [right_index, largest], immediateResult, animation);\r\n\t}\r\n\r\n\tif (largest !== index) {\r\n\t\tswap(arr, largest, index);\r\n\t\tupdateImmediateResult(arr, [index, largest], immediateResult, animation);\r\n\t\theapify(arr, arraySize, largest, immediateResult, animation);\r\n\t}\r\n};\r\n\r\nconst swap = (arr: number[], first: number, second: number) => {\r\n\tif (first >= arr.length || second >= arr.length) {\r\n\t\tthrow Error('index out of range in swap');\r\n\t}\r\n\tconst temp = arr[first];\r\n\tarr[first] = arr[second];\r\n\tarr[second] = temp;\r\n};\r\n\r\nconst updateImmediateResult = (\r\n\tresult: number[],\r\n\tcomparedElement: number[],\r\n\timmediateResult: number[][],\r\n\tanimation: number[][]\r\n) => {\r\n\timmediateResult.push([...result]);\r\n\tanimation.push(comparedElement);\r\n};\r\n\r\nexport default heapSortHelper;\r\n","import { MERGE_SORT } from \"../utils/constants\";\r\n\r\nconst mergeSortHelper = (arr: number[]) => {\r\n    const sortedArray = [...arr];\r\n    const immediateResult: number[][] = [];\r\n    const animations: number[][] = [];\r\n    mergeSort(0, sortedArray.length - 1, sortedArray, immediateResult, animations);\r\n    return {\r\n        sortedArray: sortedArray,\r\n        immediateResult: immediateResult,\r\n        animations: animations,\r\n        algorithm: MERGE_SORT,\r\n    };\r\n};\r\n\r\nconst mergeSort = (\r\n    low: number,\r\n    high: number,\r\n    arr: Array<number>,\r\n    immediateResult: number[][],\r\n    animations: number[][]) => {\r\n    if (low < high) {\r\n        const middle = low + Math.floor((high - low) / 2);\r\n        mergeSort(low, middle, arr, immediateResult, animations);\r\n        mergeSort(middle + 1, high, arr, immediateResult, animations);\r\n        merge(low, middle, high, arr, immediateResult, animations);\r\n    }\r\n};\r\n\r\nconst merge = (\r\n    low: number,\r\n    middle: number,\r\n    high: number,\r\n    arr: number[],\r\n    immediateResult: number[][],\r\n    animations: number[][]) => {\r\n    let i = low;\r\n    let j = middle + 1;\r\n    let k = low;\r\n    const helperArray = [...arr];\r\n    while (i <= middle && j <= high) {\r\n        if (helperArray[i] < helperArray[j]) {\r\n            arr[k] = helperArray[i];\r\n            i++;\r\n        } else {\r\n            arr[k] = helperArray[j];\r\n            j++;\r\n        }\r\n        animations.push([i, j]);\r\n        immediateResult.push([...arr]);\r\n        k++;\r\n    }\r\n    while (i <= middle) {\r\n        arr[k] = helperArray[i];\r\n        animations.push([i]);\r\n        immediateResult.push([...arr]);\r\n        i++;\r\n        k++;\r\n    }\r\n    while (j <= high) {\r\n        arr[k] = helperArray[j];\r\n        animations.push([j]);\r\n        immediateResult.push([...arr]);\r\n        j++;\r\n        k++;\r\n    }\r\n};\r\n\r\nexport default mergeSortHelper;","import { QUICK_SORT } from \"../utils/constants\";\r\n\r\nconst quickSortHelper = (arr: number[]) => {\r\n    const sortedArray = [...arr];\r\n    const immediateResult: number[][] = [];\r\n    const animations: number[][] = [];\r\n    quickSort(0, sortedArray.length - 1, sortedArray, immediateResult, animations);\r\n    return {\r\n        sortedArray: sortedArray,\r\n        immediateResult: immediateResult,\r\n        animations: animations,\r\n        algorithm: QUICK_SORT,\r\n    };\r\n};\r\n\r\nconst quickSort = (\r\n        low: number, \r\n        high: number, \r\n        arr: number[], \r\n        immediateResult: number[][],\r\n        animations: number[][]) => {\r\n    if (low < high) {\r\n        const p = partition(low, high, arr, immediateResult, animations);\r\n        quickSort(low, p - 1, arr, immediateResult, animations);\r\n        quickSort(p + 1, high, arr, immediateResult, animations);\r\n    }\r\n};\r\n\r\n/**\r\n * 1. Put the number element smaller than pivot to the left\r\n * 2. Put the number element larger than pivot to the right\r\n * 3. Return the new index of the pivot\r\n * @param low start index of the array\r\n * @param high end index of the array \r\n * @param arr arr to be partitioned\r\n */\r\nconst partition = (\r\n        low: number, \r\n        high: number, \r\n        arr: number[], \r\n        immediateResult: number[][],\r\n        animations: number[][]) => {\r\n    const pivot = arr[high];\r\n    let j = low - 1;\r\n    for (let i = low; i < high; ++i) {\r\n        if (arr[i] < pivot) {\r\n            j++;\r\n            swapElement(i, j, arr);\r\n            immediateResult.push([...arr]);\r\n            animations.push([i, j, high]);\r\n        }\r\n    }\r\n    swapElement(j + 1, high, arr);\r\n    immediateResult.push([...arr]);\r\n    animations.push([j + 1, high]);\r\n    return j + 1;\r\n};\r\n\r\nconst swapElement = (i: number, j: number, arr: number[]) => {\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n};\r\n\r\nexport default quickSortHelper;","import heapSortHelper from './heapSort';\r\nimport bubbleSortHelper from './bubbleSort';\r\nimport insertionSortHelper from './insertionSort';\r\nimport mergeSortHelper from './mergeSort';\r\nimport quickSortHelper from './quickSort';\r\nimport selectionSortHelper from './selectionSort';\r\n\r\ntype ConfigurationType = {\r\n\t[key: string]: {\r\n\t\tname: string;\r\n\t\tvalue: string;\r\n\t\tsort: (\r\n\t\t\tarr: number[]\r\n\t\t) => {\r\n\t\t\tsortedArray: number[];\r\n\t\t\timmediateResult: number[][];\r\n\t\t\tanimations: number[][];\r\n\t\t\talgorithm: string;\r\n\t\t};\r\n\t};\r\n};\r\n\r\nexport const sortingConfiguration: ConfigurationType = {\r\n\tbubble: {\r\n\t\tname: 'Bubble Sort',\r\n\t\tvalue: 'bubble',\r\n\t\tsort: bubbleSortHelper,\r\n\t},\r\n\theap: {\r\n\t\tname: 'Heap Sort',\r\n\t\tvalue: 'heap',\r\n\t\tsort: heapSortHelper,\r\n\t},\r\n\tinsertion: {\r\n\t\tname: 'Insertion Sort',\r\n\t\tvalue: 'insertion',\r\n\t\tsort: insertionSortHelper,\r\n\t},\r\n\tmerge: {\r\n\t\tname: 'Merge Sort',\r\n\t\tvalue: 'merge',\r\n\t\tsort: mergeSortHelper,\r\n\t},\r\n\tquick: {\r\n\t\tname: 'Quick Sort',\r\n\t\tvalue: 'quick',\r\n\t\tsort: quickSortHelper,\r\n\t},\r\n\tselection: {\r\n\t\tname: 'Selection Sort',\r\n\t\tvalue: 'selection',\r\n\t\tsort: selectionSortHelper,\r\n\t},\r\n};\r\n","import { BUBBLE_SORT } from \"../utils/constants\";\r\n\r\nconst bubbleSortHelper = (arr: number[]) => {\r\n    const sortedArray = [...arr];\r\n    const immediateResult: number[][] = [];\r\n    const animations: number[][] = [];\r\n    while (true) {\r\n        let swapped = false;\r\n        for (let i = 0; i < sortedArray.length - 1; ++i) {\r\n            immediateResult.push([...sortedArray]);\r\n            animations.push([i, i + 1]);\r\n            if (sortedArray[i] > sortedArray[i + 1]) {\r\n                const temp = sortedArray[i];\r\n                sortedArray[i] = sortedArray[i + 1];\r\n                sortedArray[i + 1] = temp;\r\n                swapped = true;\r\n            }\r\n        }\r\n        if (!swapped) break;\r\n    }\r\n    return {\r\n        sortedArray: sortedArray,\r\n        immediateResult: immediateResult,\r\n        animations: animations,\r\n        algorithm: BUBBLE_SORT,\r\n    };\r\n};\r\n\r\nexport default bubbleSortHelper;","import { INSERTION_SORT } from \"../utils/constants\";\r\n\r\nconst insertionSortHelper = (arr: Array<number>) => {\r\n    const sortedArray = [...arr];\r\n    const immediateResult: number[][] = [];\r\n    const animations: number[][] = [];\r\n    for (let i = 1; i < sortedArray.length; ++i) {\r\n        const key = sortedArray[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && (sortedArray[j] > key)) {\r\n            sortedArray[j + 1] = sortedArray[j];\r\n            immediateResult.push([...sortedArray]);\r\n            animations.push([j + 1, j]);\r\n            j--;\r\n        }\r\n        sortedArray[j + 1] = key;\r\n        immediateResult.push([...sortedArray]);\r\n        animations.push([i, j + 1]);\r\n    }\r\n    return {\r\n        sortedArray: sortedArray,\r\n        immediateResult: immediateResult,\r\n        animations: animations,\r\n        algorithm: INSERTION_SORT,\r\n    };\r\n};\r\n\r\nexport default insertionSortHelper;","import { SELECTION_SORT } from \"../utils/constants\";\r\n\r\nconst selectionSortHelper = (arr: number[]) => {\r\n    const sortedArray = [...arr];\r\n    const immediateResult: number[][] = [];\r\n    const animations: number[][] = [];\r\n    for (let i = 0; i < sortedArray.length - 1; ++i) {\r\n        let minIndex = i;\r\n        for (let j = i + 1; j < sortedArray.length; ++j) {\r\n            immediateResult.push([...sortedArray]);\r\n            animations.push([j, minIndex]);\r\n            if (sortedArray[j] < sortedArray[minIndex]) minIndex = j;\r\n        }\r\n        // Swap the elements\r\n        const temp = sortedArray[i];\r\n        sortedArray[i] = sortedArray[minIndex];\r\n        sortedArray[minIndex] = temp;\r\n        immediateResult.push([...sortedArray]);\r\n        animations.push([i, minIndex]);\r\n    }\r\n    return {\r\n        sortedArray: sortedArray,\r\n        immediateResult: immediateResult,\r\n        animations: animations,\r\n        algorithm: SELECTION_SORT,\r\n    };\r\n};\r\n\r\nexport default selectionSortHelper;","import * as React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Slider, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { sortingConfiguration } from '../../sorting/configuration';\r\n\r\ntype SortingOptionProp = {\r\n\tminNumberOfElement: number;\r\n\tmaxNumberOfElement: number;\r\n\tdefaultNumberOfNumber: number;\r\n\tnumberOfElement: number;\r\n\tsortInProgress: boolean;\r\n\tsortingMethod: string;\r\n\tupdateSortingElement: (numberOfElement: number) => void;\r\n\tupdateSortingMethod: (method: string) => void;\r\n\tresetArray: () => void;\r\n\tsort: () => void;\r\n};\r\n\r\nconst SortingOption: React.FC<SortingOptionProp> = ({\r\n\tmaxNumberOfElement,\r\n\tminNumberOfElement,\r\n\tdefaultNumberOfNumber,\r\n\tnumberOfElement,\r\n\tsortingMethod,\r\n\tsortInProgress,\r\n\tsort,\r\n\tupdateSortingMethod,\r\n\tupdateSortingElement,\r\n\tresetArray,\r\n}) => {\r\n\treturn (\r\n\t\t<Box flexDirection='column' display='flex'>\r\n\t\t\t<h2 style={{ margin: 0 }}>Sorting Algorithm Visualiser</h2>\r\n\t\t\t<Box\r\n\t\t\t\tflexDirection='row'\r\n\t\t\t\tdisplay='flex'\r\n\t\t\t\talignItems='center'\r\n\t\t\t\tjustifyContent='center'>\r\n\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t\tonClick={() => resetArray()}>\r\n\t\t\t\t\t\tReset Array\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t<p>Number of Element: {numberOfElement}</p>\r\n\t\t\t\t\t<Slider\r\n\t\t\t\t\t\tgetAriaValueText={(value: number) => {\r\n\t\t\t\t\t\t\treturn value + '';\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\taria-labelledby='discrete-slider'\r\n\t\t\t\t\t\tvalueLabelDisplay='auto'\r\n\t\t\t\t\t\tonChange={(event, value) =>\r\n\t\t\t\t\t\t\tupdateSortingElement(value as number)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvalue={numberOfElement}\r\n\t\t\t\t\t\tdefaultValue={defaultNumberOfNumber}\r\n\t\t\t\t\t\tmin={minNumberOfElement}\r\n\t\t\t\t\t\tmax={maxNumberOfElement}\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\tupdateSortingMethod(event.target.value as string)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvalue={sortingMethod}>\r\n\t\t\t\t\t\t{Object.keys(sortingConfiguration).map((method) => (\r\n\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\tkey={method}\r\n\t\t\t\t\t\t\t\tvalue={sortingConfiguration[method].value}>\r\n\t\t\t\t\t\t\t\t{sortingConfiguration[method].name}\r\n\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t\tonClick={() => sort()}>\r\n\t\t\t\t\t\tSort\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default SortingOption;\r\n","export const ELEMENT_MAX_SIZE = 100;\r\nexport const generateRandomArray = (numberOfElement: number) => {\r\n\tconst randomArray = [];\r\n\tfor (let i = 0; i < numberOfElement; ++i) {\r\n\t\trandomArray.push(Math.floor(Math.random() * ELEMENT_MAX_SIZE));\r\n\t}\r\n\treturn randomArray;\r\n};\r\n\r\nexport const throttle = (func: Function, thresold: number = 250) => {\r\n\tlet isCalled = false;\r\n\treturn (...args: any) => {\r\n\t\tif (!isCalled) {\r\n\t\t\tfunc(...args);\r\n\t\t\tisCalled = true;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tisCalled = false;\r\n\t\t\t}, thresold);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const throttleQueue = (func: Function, thresold: number = 250) => {\r\n\tlet isCalled = false;\r\n\tlet queueValues: any[] = [];\r\n\treturn (...args: any) => {\r\n\t\tif (!isCalled) {\r\n\t\t\tqueueValues.push(...args);\r\n\t\t\tfunc(queueValues);\r\n\t\t\tisCalled = true;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tisCalled = false;\r\n\t\t\t\tqueueValues = [];\r\n\t\t\t}, thresold);\r\n\t\t} else {\r\n\t\t\tqueueValues.push(...args);\r\n\t\t}\r\n\t};\r\n};\r\n","import * as React from 'react';\r\nimport { makeStyles, Theme, createStyles, Tooltip } from '@material-ui/core';\r\nimport { ELEMENT_MAX_SIZE } from '../utils/utils';\r\n\r\ntype SortingBarProp = {\r\n\tcolor: string;\r\n\theight: number;\r\n\tnumberOfElement: number;\r\n};\r\n\r\nconst SortingBar: React.FC<SortingBarProp> = ({ color, height, numberOfElement }) => {\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\tbar: {\r\n\t\t\t\theight: `calc(100% * ${height} / ${ELEMENT_MAX_SIZE})`,\r\n\t\t\t\twidth: `calc(100% / ${numberOfElement})`,\r\n\t\t\t\tbackgroundColor: color,\r\n\t\t\t\tborder: `1px solid`,\r\n\t\t\t},\r\n\t\t})\r\n\t);\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Tooltip title={`${height}`} placement='top'>\r\n\t\t\t\t<div className={classes.bar}></div>\r\n\t\t\t</Tooltip>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default SortingBar;\r\n","import { useState, useEffect, useRef } from 'react';\r\n\r\nfunction useThrottleEffect<T>(throttleValue: T, initThrottleItem: T, delay: number) {\r\n    const [throttleItem, setThrottleItem] = useState<T>(initThrottleItem);\r\n    const savedArguments = useRef<T | null>(null);\r\n    const throttle = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (throttle) {\r\n            savedArguments.current = throttleValue;\r\n        }\r\n        if (throttle.current === false) {\r\n            throttle.current = true;\r\n            setThrottleItem(throttleValue);\r\n            setTimeout(() => {\r\n                if (savedArguments.current) setThrottleItem(savedArguments.current);\r\n                savedArguments.current = null;\r\n                throttle.current = false;\r\n            }, delay);\r\n        }\r\n    }, [throttleValue, delay]);\r\n    return throttleItem;\r\n}\r\n\r\nexport default useThrottleEffect;","import React, { useState, useEffect } from 'react';\r\n\r\n// UI Components\r\nimport { Box } from '@material-ui/core';\r\nimport SortingOption from './SortingOption';\r\nimport SortingBar from '../SortingBar';\r\n\r\n// Constants and Utils\r\nimport { generateRandomArray } from '../../utils/utils';\r\nimport { animationColor, defaultColor } from '../../utils/constants';\r\nimport useThrottleEffect from '../../hook/throttle';\r\nimport { sortingConfiguration } from '../../sorting/configuration';\r\n\r\ntype SortElements = {\r\n\tsortArray: number[];\r\n\tanimations: number[];\r\n};\r\n\r\nconst animationTimeout: NodeJS.Timeout[] = [];\r\nconst DEFAULT_OPTION = 'quick';\r\nconst DEFAULT_NUMBER_OF_ELEMENT = 70;\r\nconst MIN_NUMBER_OF_ELEMENT = 10;\r\nconst MAX_NUMBER_OF_ELEMENT = 100;\r\n\r\nconst SortingVisualiser: React.FC = () => {\r\n\tconst [sortingMethod, setSortingMethod] = useState(DEFAULT_OPTION);\r\n\tconst [numberOfElement, setNumberOfElement] = useState<number>(DEFAULT_NUMBER_OF_ELEMENT);\r\n\tconst [sortElements, setSortElements] = useState<SortElements>({\r\n\t\tsortArray: [],\r\n\t\tanimations: [],\r\n\t});\r\n\tconst [sortInProgress, setSortInProgress] = useState<boolean>(false);\r\n\tconst throttleItem = useThrottleEffect(numberOfElement, DEFAULT_NUMBER_OF_ELEMENT, 800);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSortElements({\r\n\t\t\tsortArray: generateRandomArray(throttleItem),\r\n\t\t\tanimations: [],\r\n\t\t});\r\n\t}, [throttleItem]);\r\n\r\n\tuseEffect(() => {\r\n\t\tanimationTimeout.length = 0;\r\n\t\treturn () => animationTimeout.forEach((timeout) => clearTimeout(timeout));\r\n\t}, []);\r\n\r\n\tconst renderSortingBar = (): Array<JSX.Element> => {\r\n\t\tlet color = 0;\r\n\t\tconst { sortArray, animations } = sortElements;\r\n\t\treturn sortArray.map((element, index) => (\r\n\t\t\t<SortingBar\r\n\t\t\t\tkey={index}\r\n\t\t\t\tnumberOfElement={numberOfElement}\r\n\t\t\t\theight={element}\r\n\t\t\t\tcolor={animations.includes(index) ? animationColor[color++ % 3] : defaultColor}\r\n\t\t\t/>\r\n\t\t));\r\n\t};\r\n\r\n\tconst sort = async () => {\r\n\t\tsetSortInProgress(true);\r\n\t\tconst { sortArray } = sortElements;\r\n\t\tif (!sortingConfiguration[sortingMethod]) {\r\n\t\t\tthrow Error(`Invalid Sorting Algorithm option ${sortingMethod}`);\r\n\t\t}\r\n\t\tconst sortingResult = sortingConfiguration[sortingMethod].sort(sortArray);\r\n\t\tconst { sortedArray, immediateResult, animations } = sortingResult;\r\n\t\tfor (let iteration = 0; iteration < immediateResult.length; ++iteration) {\r\n\t\t\tawait sortingAnimation(immediateResult[iteration], animations[iteration]);\r\n\t\t}\r\n\t\tawait sortingAnimation(sortedArray, []);\r\n\t\tsetSortInProgress(false);\r\n\t};\r\n\r\n\tconst sortingAnimation = (sortArray: number[], animations: number[]): Promise<number[]> => {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tconst timeout = setTimeout(() => {\r\n\t\t\t\tsetSortElements({\r\n\t\t\t\t\tsortArray: sortArray,\r\n\t\t\t\t\tanimations: animations,\r\n\t\t\t\t});\r\n\t\t\t\tresolve();\r\n\t\t\t}, Math.ceil(500 / numberOfElement));\r\n\t\t\tanimationTimeout.push(timeout);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<SortingOption\r\n\t\t\t\tdefaultNumberOfNumber={DEFAULT_NUMBER_OF_ELEMENT}\r\n\t\t\t\tminNumberOfElement={MIN_NUMBER_OF_ELEMENT}\r\n\t\t\t\tmaxNumberOfElement={MAX_NUMBER_OF_ELEMENT}\r\n\t\t\t\tsortingMethod={sortingMethod}\r\n\t\t\t\tsortInProgress={sortInProgress}\r\n\t\t\t\tnumberOfElement={numberOfElement}\r\n\t\t\t\tsort={() => sort()}\r\n\t\t\t\tupdateSortingMethod={(method) => setSortingMethod(method)}\r\n\t\t\t\tupdateSortingElement={(number) => setNumberOfElement(number)}\r\n\t\t\t\tresetArray={() =>\r\n\t\t\t\t\tsetSortElements({\r\n\t\t\t\t\t\tsortArray: generateRandomArray(numberOfElement),\r\n\t\t\t\t\t\tanimations: [],\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t\t<Box display='flex' alignItems='center' justifyContent='center'>\r\n\t\t\t\t<Box flexDirection='row' display='flex' style={{ width: '80%', height: 200 }}>\r\n\t\t\t\t\t{renderSortingBar()}\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default SortingVisualiser;\r\n","import React, { useState } from 'react';\r\nimport { Box, Button, Slider } from '@material-ui/core';\r\n\r\ntype SortingCompetitionOptionProps = {\r\n\tdefaultNumberOfElement: number;\r\n\tminNumberOfElement: number;\r\n\tmaxNumberOfElement: number;\r\n\tsortInProgress: boolean;\r\n\tresetArray: () => void;\r\n\tupdateSortingElement: (number: number) => void;\r\n\tsort: () => void;\r\n};\r\n\r\nconst SortingCompetitionOption: React.FC<SortingCompetitionOptionProps> = ({\r\n\tdefaultNumberOfElement,\r\n\tminNumberOfElement,\r\n\tmaxNumberOfElement,\r\n\tsortInProgress,\r\n\tresetArray,\r\n\tupdateSortingElement,\r\n\tsort\r\n}) => {\r\n\tconst [numberOfElement, setNumberOfElement] = useState<number>(20);\r\n\treturn (\r\n\t\t<Box flexDirection='column' display='flex'>\r\n\t\t\t<h2 style={{ margin: 0 }}>Sorting Algorithm Competition</h2>\r\n\t\t\t<Box\r\n\t\t\t\tflexDirection='row'\r\n\t\t\t\tdisplay='flex'\r\n\t\t\t\talignItems='center'\r\n\t\t\t\tjustifyContent='center'>\r\n\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t\tonClick={() => resetArray()}>\r\n\t\t\t\t\t\tReset Array\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Box style={{ margin: 0 }}>\r\n\t\t\t\t\t<p>Number of Element: {numberOfElement}</p>\r\n\t\t\t\t\t<Slider\r\n\t\t\t\t\t\tgetAriaValueText={value => value + ''}\r\n\t\t\t\t\t\taria-labelledby='discrete-slider'\r\n\t\t\t\t\t\tvalueLabelDisplay='auto'\r\n\t\t\t\t\t\tonChange={(event, number) => {\r\n\t\t\t\t\t\t\tsetNumberOfElement(number as number);\r\n\t\t\t\t\t\t\tupdateSortingElement(number as number);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tvalue={numberOfElement}\r\n\t\t\t\t\t\tdefaultValue={defaultNumberOfElement}\r\n\t\t\t\t\t\tmin={minNumberOfElement}\r\n\t\t\t\t\t\tmax={maxNumberOfElement}\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Box p={1}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\tdisabled={sortInProgress}\r\n\t\t\t\t\t\tonClick={() => sort()}>\r\n\t\t\t\t\t\tStart Sorting\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default SortingCompetitionOption;\r\n","import * as React from 'react';\r\nimport SortingBar from '../SortingBar';\r\nimport { animationColor, defaultColor } from '../../utils/constants';\r\nimport { Box, makeStyles, Theme } from '@material-ui/core';\r\n\r\ntype SortingModelProps = {\r\n\talgorithm: string;\r\n\tnumberOfElement: number;\r\n\tsortArray: number[];\r\n\tanimations: number[];\r\n};\r\n\r\nconst useStyle = makeStyles((theme: Theme) => ({\r\n\tsortingModelContainer: {\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\twidth: '40%'\r\n\t\t},\r\n\t\t[theme.breakpoints.up('md')]: {\r\n\t\t\twidth: '30%'\r\n\t\t},\r\n\t\t[theme.breakpoints.up('lg')]: {\r\n\t\t\twidth: '20%'\r\n\t\t}\r\n\t},\r\n\tsortingModel: {\r\n\t\twidth: '100%',\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\theight: 80\r\n\t\t},\r\n\t\t[theme.breakpoints.up('md')]: {\r\n\t\t\theight: 150\r\n\t\t},\r\n\t\t[theme.breakpoints.up('lg')]: {\r\n\t\t\theight: 200\r\n\t\t}\r\n\t}\r\n}));\r\n\r\nconst SortingModel: React.FC<SortingModelProps> = ({\r\n\talgorithm,\r\n\tnumberOfElement,\r\n\tsortArray,\r\n\tanimations\r\n}) => {\r\n\tconst styles = useStyle();\r\n\tconst renderSortingBar = (): Array<JSX.Element> => {\r\n\t\tlet color = 0;\r\n\t\treturn sortArray.map((element, index) => (\r\n\t\t\t<SortingBar\r\n\t\t\t\tkey={index}\r\n\t\t\t\tnumberOfElement={numberOfElement}\r\n\t\t\t\theight={element}\r\n\t\t\t\tcolor={\r\n\t\t\t\t\tanimations.includes(index)\r\n\t\t\t\t\t\t? animationColor[color++ % 3]\r\n\t\t\t\t\t\t: defaultColor\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box m={1} className={styles.sortingModelContainer}>\r\n\t\t\t<h6>{algorithm}</h6>\r\n\t\t\t<Box\r\n\t\t\t\tflexDirection='row'\r\n\t\t\t\tdisplay='flex'\r\n\t\t\t\tclassName={styles.sortingModel}>\r\n\t\t\t\t{renderSortingBar()}\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default SortingModel;\r\n","import React from 'react';\r\nimport {\r\n\tTableContainer,\r\n\tTable,\r\n\tTableRow,\r\n\tTableHead,\r\n\tTableCell,\r\n\tTableBody,\r\n\tPaper,\r\n\tmakeStyles,\r\n\tTheme\r\n} from '@material-ui/core';\r\nimport { SortElements } from '../../types/type';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tcomparisonTable: {\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\twidth: '85%',\r\n\t\t\theight: 100\r\n\t\t},\r\n\t\t[theme.breakpoints.up('lg')]: {\r\n\t\t\tminWidth: 600,\r\n\t\t\tmaxWidth: 750\r\n\t\t}\r\n\t}\r\n}));\r\n\r\ntype SortingCompetitionTableProp = {\r\n\tsortElements?: SortElements;\r\n};\r\n\r\nconst SortingCompetitionTable: React.FC<SortingCompetitionTableProp> = ({\r\n\tsortElements\r\n}) => {\r\n\tconst classes = useStyles();\r\n\tconst renderTableRow = () => {\r\n\t\tif (!sortElements) return;\r\n\t\treturn Object.keys(sortElements).map(sortElementKey => (\r\n\t\t\t<TableRow key={sortElementKey}>\r\n\t\t\t\t<TableCell component='th' scope='row'>\r\n\t\t\t\t\t{sortElementKey}\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell>{sortElements[sortElementKey].comparison}</TableCell>\r\n\t\t\t</TableRow>\r\n\t\t));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TableContainer component={Paper} className={classes.comparisonTable}>\r\n\t\t\t<Table size='small' className={classes.comparisonTable}>\r\n\t\t\t\t<TableHead>\r\n\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t<TableCell>Sorting Method</TableCell>\r\n\t\t\t\t\t\t<TableCell>Comparison</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t</TableHead>\r\n\t\t\t\t<TableBody>{renderTableRow()}</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t);\r\n};\r\n\r\nexport default SortingCompetitionTable;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box } from '@material-ui/core';\r\n\r\nimport { generateRandomArray } from '../../utils/utils';\r\nimport { SortingResult, SortElements } from '../../types/type';\r\n// Components\r\nimport SortingCompetitionOption from './SortingCompetitionOption';\r\nimport SortingModel from './SortingModel';\r\nimport SortingCompetitionTable from './SortingCompetitionTable';\r\n\r\nimport useThrottleEffect from '../../hook/throttle';\r\nimport { sortingConfiguration } from '../../sorting/configuration';\r\n\r\nconst animationTimeout: NodeJS.Timeout[] = [];\r\n\r\nconst SortingCompetition: React.FC = () => {\r\n\tconst [numberOfElement, setNumberOfElement] = useState<number>(20);\r\n\tconst [sortElements, setSortElements] = useState<SortElements>();\r\n\tconst [sortInProgress, setSortInProgress] = useState<boolean>(false);\r\n\tconst [reset, setReset] = useState<boolean>(false);\r\n\tconst throttleItem = useThrottleEffect(numberOfElement, 20, 2000);\r\n\r\n\tuseEffect(() => {\r\n\t\tinitSortElements(throttleItem);\r\n\t}, [throttleItem, reset]);\r\n\r\n\tuseEffect(() => {\r\n\t\tanimationTimeout.length = 0;\r\n\t\treturn () => animationTimeout.forEach((timeout) => clearTimeout(timeout));\r\n\t}, []);\r\n\r\n\tconst initSortElements = (number: number) => {\r\n\t\tconst randomArray = generateRandomArray(number);\r\n\t\tconst newSortElements: SortElements = {};\r\n\t\tObject.keys(sortingConfiguration).forEach((sortingAlgorithm) => {\r\n\t\t\tnewSortElements[sortingAlgorithm] = {\r\n\t\t\t\tsortArray: [...randomArray],\r\n\t\t\t\tanimations: [],\r\n\t\t\t\tcomparison: 0,\r\n\t\t\t};\r\n\t\t});\r\n\t\tsetSortElements(newSortElements);\r\n\t};\r\n\r\n\tconst renderSortingModel = () => {\r\n\t\tif (!sortElements) return;\r\n\t\treturn Object.keys(sortElements).map((algorithm) => (\r\n\t\t\t<SortingModel\r\n\t\t\t\tkey={algorithm}\r\n\t\t\t\talgorithm={algorithm}\r\n\t\t\t\tnumberOfElement={throttleItem}\r\n\t\t\t\tsortArray={sortElements[algorithm].sortArray}\r\n\t\t\t\tanimations={sortElements[algorithm].animations}\r\n\t\t\t/>\r\n\t\t));\r\n\t};\r\n\r\n\tconst sortCompetitionStart = () => {\r\n\t\tsetSortInProgress(true);\r\n\t\tif (!sortElements) return;\r\n\t\tconst sortingResult: SortingResult[] = [];\r\n\t\tObject.keys(sortElements).forEach((algorithm) => {\r\n\t\t\tconst sortArray = sortElements[algorithm].sortArray;\r\n\t\t\tsortingResult.push({ ...sortingConfiguration[algorithm].sort(sortArray) });\r\n\t\t});\r\n\t\tstartAnimation(sortingResult)\r\n\t\t\t.then(() => setSortInProgress(false))\r\n\t\t\t.catch((err) => alert(err.message));\r\n\t};\r\n\r\n\tconst startAnimation = async (sortingResult: SortingResult[]) => {\r\n\t\t// Find the maximum number of immediate result among all sorting results\r\n\t\tlet maxIteration = 0;\r\n\t\tsortingResult.forEach((result) => {\r\n\t\t\tif (result.immediateResult.length > maxIteration)\r\n\t\t\t\tmaxIteration = result.immediateResult.length;\r\n\t\t});\r\n\r\n\t\tlet newSortArray: SortElements = {};\r\n\t\tfor (let iteration = 0; iteration < maxIteration; ++iteration) {\r\n\t\t\tfor (const sortingResultByAlgorithm of sortingResult) {\r\n\t\t\t\tconst iterationLength = sortingResultByAlgorithm.immediateResult.length;\r\n\t\t\t\t// If the sorting is not yet finished, update the immediate result and animation\r\n\t\t\t\tif (iteration < iterationLength) {\r\n\t\t\t\t\tnewSortArray = {\r\n\t\t\t\t\t\t...newSortArray,\r\n\t\t\t\t\t\t[sortingResultByAlgorithm.algorithm]: {\r\n\t\t\t\t\t\t\tcomparison: iteration,\r\n\t\t\t\t\t\t\tsortArray: sortingResultByAlgorithm.immediateResult[iteration],\r\n\t\t\t\t\t\t\tanimations: sortingResultByAlgorithm.animations[iteration],\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Once the sorting is finished, clear the animation\r\n\t\t\t\tif (iteration === iterationLength - 1) {\r\n\t\t\t\t\tnewSortArray = {\r\n\t\t\t\t\t\t...newSortArray,\r\n\t\t\t\t\t\t[sortingResultByAlgorithm.algorithm]: {\r\n\t\t\t\t\t\t\tcomparison: iteration,\r\n\t\t\t\t\t\t\tsortArray: sortingResultByAlgorithm.immediateResult[iteration],\r\n\t\t\t\t\t\t\tanimations: [],\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tawait sortAnimation(newSortArray);\r\n\t\t}\r\n\t};\r\n\r\n\tconst sortAnimation = (newSortElements: SortElements) => {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tconst timeoutId = setTimeout(() => {\r\n\t\t\t\tconsole.log(`sorting aniamtion called`);\r\n\t\t\t\tsetSortElements(newSortElements);\r\n\t\t\t\tresolve();\r\n\t\t\t}, 10);\r\n\t\t\tanimationTimeout.push(timeoutId);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box\r\n\t\t\tdisplay='flex'\r\n\t\t\tflexDirection='column'\r\n\t\t\tstyle={{ width: '100%' }}\r\n\t\t\talignItems='center'\r\n\t\t\tjustifyContent='center'>\r\n\t\t\t<SortingCompetitionOption\r\n\t\t\t\tminNumberOfElement={10}\r\n\t\t\t\tmaxNumberOfElement={30}\r\n\t\t\t\tdefaultNumberOfElement={20}\r\n\t\t\t\tsortInProgress={sortInProgress}\r\n\t\t\t\tsort={() => sortCompetitionStart()}\r\n\t\t\t\tupdateSortingElement={(number) => setNumberOfElement(number)}\r\n\t\t\t\tresetArray={() => setReset(!reset)}\r\n\t\t\t/>\r\n\t\t\t<SortingCompetitionTable sortElements={sortElements} />\r\n\t\t\t<Box display='flex' flexDirection='row' flexWrap='wrap' style={{ width: '80%' }} m={1}>\r\n\t\t\t\t{renderSortingModel()}\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default SortingCompetition;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\n// UI Components\r\nimport { AppBar, Toolbar, Typography, Drawer, IconButton } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport SideMenuList from './components/SideMenuList';\r\nimport SortingVisualiser from './components/SortingVisualiser/SortingVisualiser';\r\nimport SortingCompetition from './components/SortingCompetition/SortingCompetition';\r\n\r\nconst App: React.FC = () => {\r\n\tconst [drawerOpen, setDrawerOpen] = useState(false);\r\n\tconst toggleDrawer = (state: boolean) => {\r\n\t\tsetDrawerOpen(state);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<AppBar position='static'>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton onClick={() => toggleDrawer(!drawerOpen)}>\r\n\t\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant='h6'>Algorithm Visualiser</Typography>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t<Drawer open={drawerOpen} onClose={() => toggleDrawer(false)}>\r\n\t\t\t\t\t<SideMenuList toggleDrawer={() => toggleDrawer(false)} />\r\n\t\t\t\t</Drawer>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path='/sorting-visualiser' exact>\r\n\t\t\t\t\t\t<SortingVisualiser />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path='/sorting-competition' exact>\r\n\t\t\t\t\t\t<SortingCompetition />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}